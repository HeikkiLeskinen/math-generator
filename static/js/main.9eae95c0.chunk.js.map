{"version":3,"sources":["Exercises.tsx","App.tsx","reportWebVitals.ts","redux/reducers.ts","index.tsx","redux/store.ts"],"names":["useStyles","makeStyles","cardRow","border","boxShadow","textShadow","alignItems","exercise","display","flexWrap","alignContent","justifyContent","calculation","flex","textAlign","answer","marginLeft","padding","inCorrect","backgroundColor","color","input","fontSize","fontFamily","fontWeight","lineHeight","letterSpacing","focused","white","yellow","icon","margin","height","width","Exercises","exercises","solve","classes","useState","Map","answers","setAnswers","updateAnswer","e","name","target","value","set","exerciseList","filter","correct","map","Card","CardContent","className","clsx","noValidate","autoComplete","Container","Box","Typography","variant","operators","join","TextField","required","id","onChange","InputProps","onClick","get","App","assignmentGenerator","setExercises","highDigit","setHighDigit","numberOfExercises","setNumberOfExercises","numberOfDigits","setNumberOfDigits","useSelector","state","score","running","useEffect","console","log","length","dispatch","useDispatch","correctAnswer","evaluate","allSumsPositive","slice","number","Array","_","i","upTill","Math","floor","random","toString","charAt","theme","createMuiTheme","palette","primary","main","purple","secondary","LABELS","settings","label","getMax","ThemeProvider","maxWidth","Object","assign","style","paddingTop","GridList","cols","spacing","cellHeight","setting","GridListTile","CardActions","type","InputLabelProps","shrink","fullWidth","inputProps","step","min","max","str","parseInt","handleChange","currentTarget","Button","it","uuidv4","next","generateExercises","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","gameReducer","action","amount","ReactDOM","render","StrictMode","store","createStore","composeWithDevTools","applyMiddleware","logger","document","getElementById"],"mappings":"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","file":"static/js/main.9eae95c0.chunk.js","sourcesContent":["import { Box } from \"@material-ui/core\";\nimport {\n  Card,\n  CardContent,\n  Container,\n  TextField,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport clsx from \"clsx\";\nimport React, { useState } from \"react\";\nimport \"./App.css\";\n\nexport interface Exercise {\n  id: string;\n  correct?: boolean;\n  operators: Array<string>;\n}\n\nexport interface ExercisesProps {\n  exercises: Array<Exercise>;\n  solve: (id: string, answer: number) => void;\n}\n\nconst useStyles = makeStyles({\n  cardRow: {\n    border: \"0 solid transparent\",\n    boxShadow: \"0 0.1875rem 0 #ec131e\",\n    textShadow: \"0 0.0625rem 0 rgb(0 0 0 / 15%)\",\n    alignItems: \"center\",\n  },\n  exercise: {\n    display: \"flex\",\n    flexWrap: \"nowrap\",\n    alignContent: \"flex-start\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  calculation: {\n    flex: 0.5,\n    textAlign: \"end\",\n  },\n  answer: {\n    flex: 0.5,\n    display: \"flex\",\n    alignItems: \"center\",\n    marginLeft: \"10px\",\n    padding: \"10px\",\n  },\n  inCorrect: {\n    backgroundColor: \"#ef5350\", // red\n    color: \"#fff\",\n    textShadow: \"0 0.0625rem 0 rgb(0 0 0 / 15%)\",\n  },\n  input: {\n    border: \"10 solid green\",\n    fontSize: \"3rem\",\n    fontFamily: \"Roboto, Helvetica, Arial, sans-serif\",\n    fontWeight: 400,\n    lineHeight: \"1.167\",\n    letterSpacing: \"0em\",\n    color: \"#929797\", // grey\n  },\n  focused: {\n    color: \"#25ad62\", // green\n  },\n  white: {\n    color: \"white\",\n    textShadow: \"0 0.0625rem 0 rgb(0 0 0 / 15%)\",\n  },\n  yellow: {\n    color: \"#ffee58\",\n    textShadow: \"0 0.0625rem 0 rgb(0 0 0 / 15%)\",\n  },\n  icon: {\n    margin: \"10px\",\n    display: \"flex\",\n    height: \"50%\",\n    width: \"50%\",\n  },\n});\n\nfunction Exercises({ exercises, solve }: ExercisesProps) {\n  const classes = useStyles();\n  const [answers, setAnswers] = useState(new Map());\n\n  const updateAnswer = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const name = e.target.name;\n    const value = e.target.value;\n    setAnswers(answers.set(name, value));\n  };\n\n  const submitAnswer = (id: string) => {\n    solve(id, answers.get(id));\n  };\n\n  const exerciseList = exercises\n    .filter((e) => e.correct !== true)\n    .map((exercise) => (\n      <Card key={exercise.id}>\n        <CardContent\n          className={clsx(classes.cardRow, {\n            [classes.inCorrect]: exercise.correct === false,\n          })}\n        >\n          <form noValidate autoComplete=\"off\">\n            <Container className={classes.exercise}>\n              <Box className={classes.calculation}>\n                <Typography variant=\"h3\">\n                  {exercise.operators.join(\" \")} =\n                </Typography>\n              </Box>\n              <Box className={clsx(classes.answer)}>\n                <TextField\n                  required\n                  name={exercise.id}\n                  variant=\"outlined\"\n                  onChange={updateAnswer}\n                  InputProps={{\n                    className: clsx(classes.input, {\n                      [(classes.inCorrect, classes.white)]:\n                        exercise.correct === false,\n                    }),\n                    classes: {\n                      focused:\n                        exercise.correct === false\n                          ? classes.yellow\n                          : classes.focused,\n                    },\n                  }}\n                />\n                <Box>\n                  <SendIcon\n                    className={classes.icon}\n                    onClick={() => submitAnswer(exercise.id)}\n                  />\n                </Box>\n              </Box>\n            </Container>\n          </form>\n        </CardContent>\n      </Card>\n    ));\n\n  return <div>{exerciseList}</div>;\n}\n\nexport default Exercises;\n","import \"./App.css\";\nimport { Button, Container, TextField } from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport { evaluate } from \"mathjs\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Exercises, { Exercise } from \"./Exercises\";\nimport { createMuiTheme } from \"@material-ui/core\";\nimport purple from \"@material-ui/core/colors/purple\";\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { ThemeProvider } from \"@material-ui/core\";\n\nimport { GridList } from \"@material-ui/core\";\nimport { GridListTile } from \"@material-ui/core\";\nimport { Card } from \"@material-ui/core\";\nimport { CardActions } from \"@material-ui/core\";\nimport { CardContent } from \"@material-ui/core\";\nimport { GameState } from \"./redux/reducers\";\n\nfunction App() {\n  const [exercises, setExercises] = useState<Array<Exercise>>([]);\n  const [highDigit, setHighDigit] = useState<number>(10);\n  const [numberOfExercises, setNumberOfExercises] = useState<number>(5);\n  const [numberOfDigits, setNumberOfDigits] = useState<number>(2);\n\n  const { score, running } = useSelector((state: GameState) => {\n    return {\n      score: state.score,\n      running: state.running\n      };\n  });\n\n  useEffect(() => {\n    console.log(running, exercises.length)\n    if(running && exercises.length === 0){\n      console.log('No more exercise')\n    }\n  }, [exercises])\n\n  const dispatch = useDispatch();\n\n\n  const solve = (id: string, answer: number) => {\n    setExercises(\n      exercises.map((e) =>\n        e.id === id\n          ? Object.assign({}, e, { correct: correctAnswer(e, answer) })\n          : e\n      )\n    );\n  };\n\n  const correctAnswer = (exercise: Exercise, answer: number) => {\n    const correctAnswer = evaluate(exercise.operators.join(\"\"));\n    return correctAnswer == answer;\n  };\n\n  const randomOperator = (index: number, upTill: number): string =>\n    index % 2 === 0\n      ? Math.floor(Math.random() * upTill).toString()\n      : \"+-*:\".charAt(Math.floor(Math.random() * 2));\n\n  const generateExercises = () => {\n    const it = assignmentGenerator();\n    dispatch({type:\"StartGame\" })\n    setExercises(\n      [...Array(numberOfExercises)].map((_, i) => {\n        return {\n          id: uuidv4(),\n          operators: it.next().value,\n        };\n      })\n    );\n  };\n\n  const allSumsPositive = (operators: string[]): boolean => {\n    if (operators.length < 3) {\n      return true;\n    }\n\n    return evaluate(operators.slice(0, 3).join(\"\")) >= 0 && allSumsPositive(operators.slice(2));\n  };\n\n  function* assignmentGenerator(): Generator<string[], any, number> {\n    const number = numberOfDigits + (numberOfDigits - 1);\n    while (true) {\n      const operators = [...Array(number)].map((_, i) =>\n        randomOperator(i, highDigit)\n      );\n\n      if (allSumsPositive(operators)) {\n        yield operators;\n      }\n    }\n  }\n\n  const theme = createMuiTheme({\n    palette: {\n      primary: {\n        main: purple[500],\n      },\n      secondary: {\n        main: \"#11cb5f\",\n      },\n    },\n  });\n\n  const LABELS: string[] = [\n    \"High Digit\",\n    \"Number of Digit\",\n    \"Number of Exercise\",\n  ];\n\n  interface SettingProps {\n    label: string;\n    value: number;\n  }\n\n  const settings: SettingProps[] = [\n    { label: LABELS[0], value: highDigit },\n    { label: LABELS[1], value: numberOfDigits },\n    { label: LABELS[2], value: numberOfExercises },\n  ];\n\n  const handleChange = (label: string, str: string) => {\n    const value = parseInt(str);\n    if (label === LABELS[0]) {\n      setHighDigit(value);\n    } else if (label === LABELS[1]) {\n      setNumberOfDigits(value);\n    } else {\n      setNumberOfExercises(value);\n    }\n  };\n\n  const getMax = (label: string) => {\n    if (label === LABELS[0]) {\n      return 100;\n    } else if (label === LABELS[1]) {\n      return 5;\n    } else {\n      return 15;\n    }\n  };\n\n  const getMin = (label: string) => {\n    if (label === LABELS[0]) {\n      return 0;\n    } else if (label === LABELS[1]) {\n      return 2;\n    } else {\n      return 1;\n    }\n  };\n\n  return (\n    <>\n      <ThemeProvider theme={theme}>\n        <article>\n          <Container maxWidth=\"xl\">\n            <Exercises exercises={exercises} solve={solve} />\n          </Container>\n\n          <Container\n            maxWidth=\"xl\"\n            style={{\n              paddingTop: \"10px\",\n            }}\n          >\n              <Card>\n              <CardContent>\n                <GridList cols={4} spacing={30} cellHeight={\"auto\"}>\n                  {settings.map((setting) => (\n                    <GridListTile cols={1}>\n                      <CardActions>\n                        <TextField\n                          label={setting.label}\n                          type=\"number\"\n                          InputLabelProps={{ shrink: true }}\n                          variant=\"filled\"\n                          value={setting.value}\n                          fullWidth\n                          inputProps={{\n                            step: 1,\n                            min: getMin(setting.label),\n                            max: getMax(setting.label),\n                          }}\n                          onChange={(e) =>\n                            handleChange(setting.label, e.currentTarget.value)\n                          }\n                        />\n                      </CardActions>\n                    </GridListTile>\n                  ))}\n                  <GridListTile cols={1}>\n                    <CardActions>\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => generateExercises()}\n                      >\n                        GENERATE EXERCISE\n                      </Button>\n                    </CardActions>\n                  </GridListTile>\n                </GridList>\n              </CardContent>\n            </Card>\n          </Container>\n        </article>\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {Actions} from './actions';\n\nexport const initialState: GameState = {\n    score: 0,\n    running: false\n};\n\nexport interface GameState {\n    score: number;\n    running: boolean;\n}\n\nexport const gameReducer = (\n    state: GameState = initialState,\n    action: Actions,\n  ): GameState => {\n\n    switch (action.type) {\n        case \"IncreaseScore\":\n            return {score: action.amount + state.score, running:false};\n        case \"StartGame\":\n            return {score: 0, running: true}\n    }\n\n    return state\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { configureStore } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n     <Provider store={configureStore()}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import {createStore, applyMiddleware} from 'redux';\nimport logger from 'redux-logger';\nimport {gameReducer} from './reducers';\nimport {composeWithDevTools} from 'redux-devtools-extension';\n\n\nexport const configureStore = () =>\n  createStore(\n    gameReducer,\n    composeWithDevTools(applyMiddleware(logger)),\n  );"],"sourceRoot":""}