{"version":3,"sources":["redux/types.ts","screens/Catalogue/index.tsx","App.tsx","domain/index.ts","reportWebVitals.ts","redux/reducers.ts","index.tsx","redux/store.ts"],"names":["TYPES","useStyles","makeStyles","cardRow","border","boxShadow","textShadow","alignItems","exercise","display","flexWrap","alignContent","justifyContent","calculation","flex","textAlign","answer","marginLeft","padding","inCorrect","backgroundColor","color","input","fontSize","fontFamily","fontWeight","lineHeight","letterSpacing","focused","white","yellow","icon","margin","height","width","Catalogue","classes","useState","Map","answers","setAnswers","catalogue","useSelector","state","dispatch","useDispatch","updateAnswer","e","name","target","value","set","submitAnswer","id","type","SUBMIT_ANSWER","payload","get","exerciseList","exercises","filter","correct","map","index","Card","CardContent","className","clsx","Container","Box","Typography","variant","operators","join","TextField","inputRef","focus","required","onChange","onKeyPress","key","handleKeyPress","InputProps","onClick","App","Category","config","score","running","theme","createMuiTheme","palette","primary","main","purple","secondary","LABELS","settings","label","highDigit","numberOfDigits","numberOfExercises","getMax","ThemeProvider","maxWidth","style","paddingTop","GridList","cols","spacing","cellHeight","setting","GridListTile","CardActions","InputLabelProps","shrink","fullWidth","inputProps","step","min","max","str","length","isEmpty","parseInt","UPDATE_CONFIG","handleChange","currentTarget","Button","START_GAME","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","assignmentGenerator","initialState","gameReducer","action","generateExercises","INCREASE_SCORE","amount","evaluateSolution","it","Array","_","i","uuidv4","next","category","WALK","Object","assign","correctAnswer","evaluate","allSumsPositive","slice","number","upTill","Math","floor","random","toString","charAt","ReactDOM","render","StrictMode","store","createStore","composeWithDevTools","applyMiddleware","logger","document","getElementById"],"mappings":"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","file":"static/js/main.7604c69f.chunk.js","sourcesContent":["enum TYPES {\n    START_GAME = 'START_GAME',\n    UPDATE_CONFIG = 'UPDATE_CONFIG',\n    GENERATE_EXERICES = 'GENERATE_EXERICES',\n    SUBMIT_ANSWER = 'SUBMIT_ANSWER',\n    INCREASE_SCORE = 'INCREASE_SCORE'\n}\n\nexport default TYPES;","\nimport { Box } from \"@material-ui/core\";\nimport {\n  Card,\n  CardContent,\n  Container,\n  TextField,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport clsx from \"clsx\";\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { GameState } from \"../../redux/reducers\";\nimport TYPES from \"../../redux/types\";\nimport \"./App.css\";\n\nexport interface Exercise {\n  id: string;\n  correct?: boolean;\n  operators: Array<string>;\n}\n\nexport interface ExercisesProps {\n  exercises: Array<Exercise>;\n  solve: (id: string, answer: number) => void;\n}\n\nconst useStyles = makeStyles({\n  cardRow: {\n    border: \"0 solid transparent\",\n    boxShadow: \"0 0.1875rem 0 #ec131e\",\n    textShadow: \"0 0.0625rem 0 rgb(0 0 0 / 15%)\",\n    alignItems: \"center\",\n  },\n  exercise: {\n    display: \"flex\",\n    flexWrap: \"nowrap\",\n    alignContent: \"flex-start\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  calculation: {\n    flex: 0.5,\n    textAlign: \"end\",\n  },\n  answer: {\n    flex: 0.5,\n    display: \"flex\",\n    alignItems: \"center\",\n    marginLeft: \"10px\",\n    padding: \"10px\",\n  },\n  inCorrect: {\n    backgroundColor: \"#ef5350\", // red\n    color: \"#fff\",\n    textShadow: \"0 0.0625rem 0 rgb(0 0 0 / 15%)\",\n  },\n  input: {\n    border: \"10 solid green\",\n    fontSize: \"3rem\",\n    fontFamily: \"Roboto, Helvetica, Arial, sans-serif\",\n    fontWeight: 400,\n    lineHeight: \"1.167\",\n    letterSpacing: \"0em\",\n    color: \"#929797\", // grey\n  },\n  focused: {\n    color: \"#25ad62\", // green\n  },\n  white: {\n    color: \"white\",\n    textShadow: \"0 0.0625rem 0 rgb(0 0 0 / 15%)\",\n  },\n  yellow: {\n    color: \"#ffee58\",\n    textShadow: \"0 0.0625rem 0 rgb(0 0 0 / 15%)\",\n  },\n  icon: {\n    margin: \"10px\",\n    display: \"flex\",\n    height: \"50%\",\n    width: \"50%\",\n  },\n});\n\nexport interface Exercise {\n  id: string;\n  correct?: boolean;\n  operators: Array<string>;\n}\n\nexport function Catalogue() {\n\n  const classes = useStyles();\n  const [answers, setAnswers] = useState(new Map());\n\n  const { catalogue } = useSelector((state: GameState) => {\n    return {\n      catalogue: state.catalogue\n    };\n  });\n\n  const dispatch = useDispatch();\n\n  const updateAnswer = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const name = e.target.name;\n    const value = e.target.value;\n    setAnswers(answers.set(name, value));\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent, id: string) => {\n    if(e.key === 'Enter'){\n      submitAnswer(id);\n    }\n  }\n\n  const submitAnswer = (id: string) => {\n    dispatch({\n      type: TYPES.SUBMIT_ANSWER,\n      payload: {id: id, answer: answers.get(id)}\n    });\n  };\n\n  const exerciseList = catalogue.exercises\n    .filter((e) => e.correct !== true)\n    .map((exercise, index) => (\n      <Card key={exercise.id}>\n        <CardContent\n          className={clsx(classes.cardRow, {\n            [classes.inCorrect]: exercise.correct === false,\n          })}\n        >\n            <Container className={classes.exercise}>\n              <Box className={classes.calculation}>\n                <Typography variant=\"h3\">\n                  {exercise.operators.join(\" \")} =\n                </Typography>\n              </Box>\n              <Box className={clsx(classes.answer)}>\n                <TextField\n                  inputRef={input => input && index === 0 && input.focus()}\n                  required\n                  name={exercise.id}\n                  variant=\"outlined\"\n                  onChange={updateAnswer}\n                  onKeyPress={e => handleKeyPress(e, exercise.id)}\n                  InputProps={{\n                    className: clsx(classes.input, {\n                      [(classes.inCorrect, classes.white)]:\n                        exercise.correct === false,\n                    }),\n                    classes: {\n                      focused:\n                        exercise.correct === false\n                          ? classes.yellow\n                          : classes.focused,\n                    },\n                  }}\n                />\n                <Box>\n                  <SendIcon\n                    className={classes.icon}\n                    onClick={() => submitAnswer(exercise.id)}\n                  />\n                </Box>\n              </Box>\n            </Container>\n        </CardContent>\n      </Card>\n    ));\n\n  return <div>{exerciseList}</div>;\n}\n","import \"./App.css\";\nimport { Button, Container, TextField } from \"@material-ui/core\";\nimport { createMuiTheme } from \"@material-ui/core\";\nimport purple from \"@material-ui/core/colors/purple\";\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { ThemeProvider } from \"@material-ui/core\";\n\nimport { GridList } from \"@material-ui/core\";\nimport { GridListTile } from \"@material-ui/core\";\nimport { Card } from \"@material-ui/core\";\nimport { CardActions } from \"@material-ui/core\";\nimport { CardContent } from \"@material-ui/core\";\nimport { GameState } from \"./redux/reducers\";\nimport TYPES from \"./redux/types\";\nimport { Catalogue } from \"./screens/Catalogue\";\n\nfunction App() {\n\n  const { config, score, running } = useSelector((state: GameState) => {\n    return {\n      config: state.config,\n      score: state.score,\n      running: state.running\n    };\n  });\n\n  const dispatch = useDispatch();\n\n  const theme = createMuiTheme({\n    palette: {\n      primary: {\n        main: purple[500],\n      },\n      secondary: {\n        main: \"#11cb5f\",\n      },\n    },\n  });\n\n  const LABELS: string[] = [\n    \"High Digit\",\n    \"Number of Digit\",\n    \"Number of Exercise\",\n  ];\n\n  interface SettingProps {\n    label: string;\n    value: number;\n  }\n\n  const settings: SettingProps[] = [\n    { label: LABELS[0], value: config.highDigit },\n    { label: LABELS[1], value: config.numberOfDigits },\n    { label: LABELS[2], value: config.numberOfExercises },\n  ];\n\n  const isEmpty = (str: string): boolean => {\n    return (!str || str.length === 0 );\n  }\n\n  const handleChange = (label: string, str: string) => {\n    if (isEmpty(str)){\n      return;\n    }\n\n    const value = parseInt(str);\n    if (label === LABELS[0]) {\n      dispatch({type: TYPES.UPDATE_CONFIG, payload: { highDigit: value }});\n    } else if (label === LABELS[1]) {\n      dispatch({type: TYPES.UPDATE_CONFIG, payload: { numberOfDigits: value }});\n    } else {\n      dispatch({type: TYPES.UPDATE_CONFIG, payload: { numberOfExercises: value }});\n    }\n  };\n\n  const getMax = (label: string) => {\n    if (label === LABELS[0]) {\n      return 100;\n    } else if (label === LABELS[1]) {\n      return 5;\n    } else {\n      return 15;\n    }\n  };\n\n  const getMin = (label: string) => {\n    if (label === LABELS[0]) {\n      return 0;\n    } else if (label === LABELS[1]) {\n      return 2;\n    } else {\n      return 1;\n    }\n  };\n\n  return (\n    <>\n      <ThemeProvider theme={theme}>\n        <article>\n          <Container maxWidth=\"xl\">\n            <Catalogue/>\n          </Container>\n\n          <Container\n            maxWidth=\"xl\"\n            style={{\n              paddingTop: \"10px\",\n            }}\n          >\n              <Card>\n              <CardContent>\n                <GridList cols={4} spacing={30} cellHeight={\"auto\"}>\n                  {settings.map((setting) => (\n                    <GridListTile cols={1}>\n                      <CardActions>\n                        <TextField\n                          label={setting.label}\n                          type=\"number\"\n                          InputLabelProps={{ shrink: true }}\n                          variant=\"filled\"\n                          value={setting.value}\n                          fullWidth\n                          inputProps={{\n                            step: 1,\n                            min: getMin(setting.label),\n                            max: getMax(setting.label),\n                          }}\n                          onChange={(e) =>\n                            handleChange(setting.label, e.currentTarget.value)\n                          }\n                        />\n                      </CardActions>\n                    </GridListTile>\n                  ))}\n                  <GridListTile cols={1}>\n                    <CardActions>\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => dispatch({type: TYPES.START_GAME})}\n                      >\n                        GENERATE EXERCISE\n                      </Button>\n                    </CardActions>\n                  </GridListTile>\n                </GridList>\n              </CardContent>\n            </Card>\n          </Container>\n        </article>\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n","export interface Catalogue {\n    exercises: Exercise[]\n}\n\nexport interface Exercise {\n    id: string;\n    correct?: boolean; //undefined == not solved\n    operators: Array<string>;\n    category: Category;\n}\n\nexport interface Config {\n    numberOfExercises: number;\n    numberOfDigits: number;\n    highDigit: number;\n}\n\nexport enum Category {\n    WALK = 'WALK',\n    FIGHT = 'FIGHT',\n    OPEN = 'OPEN',\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { evaluate } from 'mathjs';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Catalogue, Config, Category, Exercise } from '../domain';\nimport {Actions} from './actions';\nimport TYPES from './types';\n\nexport const initialState: GameState = {\n    score: 0,\n    running: false,\n    config: {\n        numberOfExercises: 10,\n        numberOfDigits: 3,\n        highDigit: 10\n    },\n    catalogue: {exercises: []},\n};\n\nexport interface GameState {\n    score: number;\n    running: boolean;\n    config: Config;\n    catalogue: Catalogue;\n}\n\nexport const gameReducer = (\n    state: GameState = initialState,\n    action: Actions,\n  ): GameState => {\n\n    switch (action.type) {\n        case TYPES.START_GAME:\n            return {\n                ...state,\n                score: 0,\n                running: true,\n                catalogue: generateExercises(state.config)\n            }\n        case TYPES.UPDATE_CONFIG:\n            return {\n                ...state,\n                config: {\n                    ...state.config,\n                    ...action.payload\n                }\n            }\n        case TYPES.INCREASE_SCORE:\n            return {\n                ...state,\n                score: action.payload.amount + state.score,\n                running:false\n            };\n        case TYPES.SUBMIT_ANSWER:\n            const {id, answer} = action.payload\n            const catalogue = evaluateSolution(state.catalogue, id, answer)\n\n            return {\n                ...state,\n                score: 0,\n                running: true,\n                catalogue: catalogue\n            }\n        default:\n            return state;\n    }\n}\n\nconst generateExercises = (config: Config): Catalogue => {\n    const it = assignmentGenerator(config);\n\n    return {\n        exercises: [...Array(config.numberOfExercises)].map((_, i) => {\n            return {\n                id: uuidv4(),\n                operators: it.next().value,\n                category: Category.WALK\n            };\n        })\n    };\n};\n\nconst evaluateSolution = (catalogue: Catalogue, id: string, answer: number): Catalogue => {\n    return {\n        exercises: catalogue.exercises.map((e) =>\n            e.id === id\n                ? Object.assign({}, e, { correct: correctAnswer(e, answer) })\n                : e\n            )\n    }\n  };\n\nconst correctAnswer = (exercise: Exercise, answer: number) => {\n    const correctAnswer = evaluate(exercise.operators.join(\"\"));\n    return correctAnswer == answer;\n};\n\nconst randomOperator = (index: number, upTill: number): string =>\n    index % 2 === 0\n    ? Math.floor(Math.random() * upTill).toString()\n    : \"+-*:\".charAt(Math.floor(Math.random() * 2));\n\nconst allSumsPositive = (operators: string[]): boolean => {\n    if (operators.length < 3) {\n        return true;\n    }\n\n    if (evaluate(operators.join(\"\")) <= 0){\n        return false;\n    }\n\n    return evaluate(operators.slice(0, 3).join(\"\")) >= 0 && allSumsPositive(operators.slice(2));\n};\n\nfunction* assignmentGenerator(config: Config): Generator<string[], any, number> {\n    const number = config.numberOfDigits + (config.numberOfDigits - 1);\n    while (true) {\n        const operators = [...Array(number)].map((_, i) =>\n            randomOperator(i, config.highDigit)\n        );\n\n        if (allSumsPositive(operators)) {\n            yield operators;\n        }\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { configureStore } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n     <Provider store={configureStore()}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import {createStore, applyMiddleware} from 'redux';\nimport logger from 'redux-logger';\nimport {gameReducer} from './reducers';\nimport {composeWithDevTools} from 'redux-devtools-extension';\n\n\nexport const configureStore = () =>\n  createStore(\n    gameReducer,\n    composeWithDevTools(applyMiddleware(logger)),\n  );"],"sourceRoot":""}