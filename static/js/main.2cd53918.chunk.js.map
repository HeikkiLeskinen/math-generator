{"version":3,"sources":["redux/types.ts","domain/index.ts","utils/operatorHelpers.ts","domain/mathExercise.ts","redux/reducers.ts","screens/Catalogue/Exercise/index.tsx","screens/Catalogue/index.tsx","components/Spacer.js","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["TYPES","BaseOperator","AdvancedOperator","Category","selectRandomOperation","operations","len","length","Math","floor","random","getOperatorsByDifficulty","difficulty","ADD","SUBSTRACT","MULTIPLY","MathExercise","params","id","symbols","wasLastSubmittedAnswerCorrect","this","answer","evaluate","toString","join","GenerateSymbols","generateRandomNumber","highDigit","numberOfDigits","generateNumber","operator","max","number","calculateNewVal","currentVal","value","firstNumber","currentString","push","newNumber","min","initialState","score","config","numberOfExercises","catalogue","exercisesCompleted","exerciseToBeCompleted","storage","symbolsById","undefined","updateStorage","catelogue","exercisesCompletedMap","map","e","completed","exerciseToBeCompletedMap","concat","readFromStorage","filter","s","generateExercises","exerciseConfig","Array","_","i","props","uuidv4","createMathExercise","useStyles","makeStyles","cardRow","border","boxShadow","textShadow","alignItems","exercise","display","flexWrap","alignContent","justifyContent","calculation","flex","textAlign","marginLeft","padding","inCorrect","backgroundColor","color","input","fontSize","fontFamily","fontWeight","lineHeight","letterSpacing","focused","white","yellow","icon","margin","height","width","ExerciseComponent","index","classes","useState","setValue","dispatch","useDispatch","submitAnswer","type","SUBMIT_ANSWER","payload","parseInt","Card","CardContent","className","clsx","Container","Box","Typography","variant","TextField","inputRef","focus","name","onChange","target","test","onKeyPress","key","handleKeyPress","InputProps","onClick","Catalogue","useSelector","state","spacer","marginBottom","Spacer","children","slider","App","theme","createTheme","palette","primary","main","purple","secondary","LABELS","settings","label","getMax","val","setVal","ThemeProvider","Grid","container","spacing","item","xs","maxWidth","style","paddingTop","CardActions","Slider","marks","step","defaultValue","newVal","UPDATE_DIFFICULTY","ImageList","cols","gap","rowHeight","setting","ImageListItem","InputLabelProps","shrink","fullWidth","inputProps","str","isEmpty","UPDATE_CONFIG","handleChange","currentTarget","Button","START_GAME","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","persistConfig","debug","persistedReducer","persistReducer","action","REHYDRATE","find","solve","store","createStore","compose","applyMiddleware","createLogger","persistor","persistStore","getState","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.2cd53918.chunk.js","sourcesContent":["enum TYPES {\n  START_GAME = 'START_GAME',\n  UPDATE_CONFIG = 'UPDATE_CONFIG',\n  GENERATE_EXERICES = 'GENERATE_EXERICES',\n  SUBMIT_ANSWER = 'SUBMIT_ANSWER',\n  INCREASE_SCORE = 'INCREASE_SCORE',\n  UPDATE_DIFFICULTY = \"UPDATE_DIFFICULTY\"\n}\n\nexport default TYPES;\n","\n\nexport interface Catalogue {\n    exercisesCompleted: Exercise[] | []\n    exerciseToBeCompleted: Exercise[] |[]\n}\n \n\nexport enum BaseOperator {\n    ADD = '+',\n    SUBSTRACT = '-',\n    MULTIPLY = '*',\n}\n\n\n\nexport enum AdvancedOperator {\n    ADD= '+',\n    SUBSTRACT = '-',\n    MULTIPLY = '*',\n    DIVIDE= '/',\n    EQUAL='=',\n    LESS='<',\n    GREATER='>'\n}\n\nexport function randEnumValue<T>(enumObj: T, randomNumberGenerator: Function): T[keyof T] {      \n    const enumVal = Object.values(enumObj);\n    const i = Math.floor(randomNumberGenerator() * enumVal.length);\n    return enumVal[i];\n}\n\nexport type SymbolsMap = { id: string, symbols: string[], completed: Boolean};\n\nexport interface Storage {\n    symbolsById: any | undefined\n}\n\nexport interface Exercise {\n    id: string;\n    wasLastSubmittedAnswerCorrect?: boolean;\n    toString: Function;\n    solve: Function;        \n}\n\nexport interface Config {\n    numberOfExercises: number;\n    numberOfDigits: number;\n    highDigit: number;\n}\n\nexport enum Category {\n    WALK = 'WALK',\n    FIGHT = 'FIGHT',\n    OPEN = 'OPEN',\n}\n","\nimport { BaseOperator } from \"../domain\";\n\nexport function selectRandomOperation(operations: BaseOperator[]) : BaseOperator {\n    const len = operations.length;\n    const i = Math.floor(Math.random() * len);\n    return operations[i]\n    \n}\n\n\n\nexport function getOperatorsByDifficulty(difficulty: number) : BaseOperator[]{\n    let operators : BaseOperator[]\n   \n    if (difficulty === 2){\n        return operators =  [BaseOperator.ADD , BaseOperator.SUBSTRACT]\n    }\n           \n    else if (difficulty === 3) {\n        return operators =  [BaseOperator.ADD , BaseOperator.SUBSTRACT , BaseOperator.MULTIPLY]\n    }      \n\n    else {\n        return operators =  [BaseOperator.ADD ]\n}  \n\n      \n\n}","import { evaluate } from \"mathjs\";\nimport { AdvancedOperator, BaseOperator, Exercise, randEnumValue } from \".\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { getOperatorsByDifficulty, selectRandomOperation } from \"../utils/operatorHelpers\";\nimport { useSelector } from \"react-redux\";\nimport { GameState } from \"../redux/reducers\";\n\ninterface Params {\n    id: string,\n    symbols: string[]\n}\n\n\nexport class MathExercise implements Exercise { \n    id: string;   \n    symbols: string[] = []\n    wasLastSubmittedAnswerCorrect?: boolean\n   \n    constructor(params : Params = {} as Params) {\n        const {\n            id,\n            symbols,    \n        } = params;\n\n        this.id = id;\n        this.symbols = symbols; \n    }\n\n    solve(answer: number): boolean { //rename to solve?\n        this.wasLastSubmittedAnswerCorrect = (evaluate(this.toString()) === answer);        \n        return this.wasLastSubmittedAnswerCorrect;\n    }  \n    \n    toString(): string {\n        return this.symbols.join(\" \");   \n    }\n    \n}\n\n\n  \nfunction GenerateSymbols(generateRandomNumber: Function, highDigit: number, numberOfDigits: number, difficulty:number) {\n\n    const generateNumber = (operator: BaseOperator | AdvancedOperator, max:number): number => {\n        const number = Math.floor(generateRandomNumber() * max)\n        return number === 0 && (operator=== '/' || operator=== '*') ? number + 1 : number\n    };\n\n    const calculateNewVal = (operator: string, currentVal: number,value:number ): number => {\n        switch (operator) {\n            case '*':\n                return currentVal * value;\n            case '/':\n                return currentVal / value;\n            case '+':\n                    return currentVal + value;\n            case '-':\n                    return currentVal - value;\n            default:\n                return currentVal;\n        } \n    };\n\n    let symbols =[]\n\n    const firstNumber = Math.floor(generateRandomNumber() * highDigit)+1;\n    let currentVal = firstNumber;\n    let currentString = firstNumber.toString()\n    symbols.push(currentString);\n\n\n\n    while (currentString.length < 2 * numberOfDigits -1) {\n        //let operator = randEnumValue(BaseOperator, generateRandomNumber)\n\n\n        let operators = getOperatorsByDifficulty(difficulty);\n        let operator = selectRandomOperation(operators);\n        let newNumber =  Math.min(currentVal, generateNumber(operator, highDigit));\n        currentVal =  calculateNewVal(operator, currentVal, newNumber);\n        currentString += operator + newNumber.toString()\n         //save symbols \n        symbols.push(operator, newNumber.toString());\n    \n    }\n    return symbols\n}\n\ninterface CreateMathExerciseProps {\n    generateRandomNumber?: Function, \n    highDigit: number,\n    numberOfDigits: number,\n    difficulty: number,\n}\nexport const createMathExercise= (props: CreateMathExerciseProps): MathExercise =>{\n    const generateRandomNumber = props.generateRandomNumber? props.generateRandomNumber: Math.random;\n    const highDigit= props.highDigit;\n    const numberOfDigits= props.numberOfDigits\n    const difficulty= props.difficulty\n    return  new MathExercise({\n        'id': uuidv4(),\n        'symbols': GenerateSymbols(generateRandomNumber,highDigit, numberOfDigits,difficulty)\n     });         \n\n}\n\n\n","import { Catalogue, Config, Exercise, Storage, SymbolsMap } from '../domain/index';\nimport { Actions } from './actions';\nimport TYPES from './types';\nimport { createMathExercise,  MathExercise }  from '../domain/mathExercise';\nimport { REHYDRATE } from 'redux-persist';\n\n\nexport default function reducer() {}\n\nexport interface GameState {\n    score: number;\n    difficulty: number;\n    config: Config;\n    catalogue: Catalogue;\n    storage: Storage;\n}\n\nexport const initialState: GameState = {\n    score: 0,\n    difficulty: 0, \n    config: {\n        numberOfExercises: 3,\n        numberOfDigits: 2,\n        highDigit: 10\n    },\n    catalogue: {  \n        exercisesCompleted:  [],\n        exerciseToBeCompleted: []\n    },\n    storage: { \n        symbolsById: undefined\n    }\n}\n\n\nexport const gameReducer = (\n    state: GameState = initialState,\n    action: Actions,\n  ): GameState => {\n\n    switch (action.type) {\n        case REHYDRATE: //READ FROM DISK   \n            if (action.payload){\n                return {\n                    ...action.payload,\n                    catalogue: readFromStorage(action.payload.storage),\n                }\n            }\n            else {\n                return {\n                    ...state,\n                    \n                }\n            }\n        case TYPES.START_GAME:\n            const catalogue = generateExercises(state.config, state.difficulty)        \n            return {\n                ...state,\n                score: 0,\n                catalogue: catalogue,\n                storage: updateStorage(catalogue)\n            }\n        case TYPES.UPDATE_CONFIG:\n            return {\n                ...state,\n                config: {\n                    ...state.config,\n                    ...action.payload\n                }\n            }\n        case TYPES.UPDATE_DIFFICULTY:\n            const {difficulty} = action.payload\n            return {\n                ...state,\n                difficulty: difficulty\n                \n            }\n        case TYPES.SUBMIT_ANSWER:\n            const {id, answer} = action.payload\n            \n            const exercise = state.catalogue.exerciseToBeCompleted.find(e => e.id === id);\n\n            if (exercise){      \n                if (exercise.solve(answer)){\n                    \n                    const catalogue = {\n                        ...state.catalogue,\n                        exercisesCompleted: [...state.catalogue.exercisesCompleted, exercise],\n                        exerciseToBeCompleted: state.catalogue.exerciseToBeCompleted.filter(e => e.id !== id)\n                    }\n\n                    return {\n                        ...state,\n                        score: state.score + 1, \n                        catalogue: catalogue,  \n                        storage: updateStorage(catalogue)                         \n                    }\n                } else {\n                    return {\n                        ...state,\n                        score: state.score - 1,\n                        storage: updateStorage(state.catalogue)                                     \n                    }\n                }                                        \n            } else {\n                return state;\n            }\n\n        default:\n            return state;\n    }\n}\n\nconst updateStorage = (catelogue: Catalogue): Storage => {\n    const {exercisesCompleted ,exerciseToBeCompleted } = catelogue;\n\n    const exercisesCompletedMap = exercisesCompleted!.map((e) => (\n        { id: e.id, symbols: (e as MathExercise).symbols, completed: true}\n        )\n    )\n    const exerciseToBeCompletedMap = exerciseToBeCompleted.map((e) => (\n        { id: e.id, symbols: (e as MathExercise).symbols, completed: false}\n        )\n    )\n\n    return {\n        symbolsById: exercisesCompletedMap.concat (exerciseToBeCompletedMap)\n    }\n}\n\nconst readFromStorage = (storage: Storage): Catalogue => {\n\n    if(storage && storage.symbolsById){ // REMOVE ME\n\n        // []\n        //  {id: \"dced3868-08c6-4325-b363-fd07ebdeac5f\", symbols: Array(3), completed: true}\n        const exercisesCompleted: Exercise[] = storage.symbolsById.filter((s: SymbolsMap) => s.completed === true)\n            .map((s: SymbolsMap) => new MathExercise({\n                'id': s.id,\n                'symbols': s.symbols,\n               \n            }));\n\n        const exerciseToBeCompleted = storage.symbolsById.filter((s: SymbolsMap) => s.completed === false)\n            .map((s: SymbolsMap) => new MathExercise({\n                'id': s.id,\n                'symbols': s.symbols,\n            }));\n        \n        return {  \n            exercisesCompleted:  exercisesCompleted,\n            exerciseToBeCompleted: exerciseToBeCompleted\n        }\n    } else {\n        return {  \n            exercisesCompleted: initialState.catalogue.exercisesCompleted ,\n            exerciseToBeCompleted: initialState.catalogue.exerciseToBeCompleted\n        }\n    }\n\n    \n}\n\nconst generateExercises = (config: Config, difficulty: number): Catalogue => {\n    const {numberOfExercises, highDigit, numberOfDigits} = config\n    const exerciseConfig = {highDigit:highDigit, numberOfDigits:numberOfDigits, difficulty:difficulty}\n    return {\n        exercisesCompleted:[],\n        exerciseToBeCompleted: [...Array(numberOfExercises)].map((_, i) : Exercise => {\n            return createMathExercise(exerciseConfig)            \n        })\n    };\n};\n\n\n","import { Box } from \"@material-ui/core\";\nimport {\n  Card,\n  CardContent,\n  Container,\n  TextField,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport clsx from \"clsx\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Exercise } from \"../../../domain\";\nimport TYPES from \"../../../redux/types\";\n\nconst useStyles = makeStyles({\n    cardRow: {\n      border: \"0 solid transparent\",\n      boxShadow: \"0 0.1875rem 0 #ec131e\",\n      textShadow: \"0 0.0625rem 0 rgb(0 0 0 / 15%)\",\n      alignItems: \"center\",\n    },\n    exercise: {\n      display: \"flex\",\n      flexWrap: \"nowrap\",\n      alignContent: \"flex-start\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n    },\n    calculation: {\n      flex: 0.5,\n      textAlign: \"end\",\n    },\n    answer: {\n      flex: 0.5,\n      display: \"flex\",\n      alignItems: \"center\",\n      marginLeft: \"10px\",\n      padding: \"10px\",\n    },\n    inCorrect: {\n      backgroundColor: \"#ef5350\", // red\n      color: \"#fff\",\n      textShadow: \"0 0.0625rem 0 rgb(0 0 0 / 15%)\",\n    },\n    input: {\n      border: \"10 solid green\",\n      fontSize: \"3rem\",\n      fontFamily: \"Roboto, Helvetica, Arial, sans-serif\",\n      fontWeight: 400,\n      lineHeight: \"1.167\",\n      letterSpacing: \"0em\",\n      color: \"#929797\", // grey\n    },\n    focused: {\n      color: \"#25ad62\", // green\n    },\n    white: {\n      color: \"white\",\n      textShadow: \"0 0.0625rem 0 rgb(0 0 0 / 15%)\",\n    },\n    yellow: {\n      color: \"#ffee58\",\n      textShadow: \"0 0.0625rem 0 rgb(0 0 0 / 15%)\",\n    },\n    icon: {\n      margin: \"10px\",\n      display: \"flex\",\n      height: \"50%\",\n      width: \"50%\",\n    },\n  });\n\n\nexport interface Props {\n    exercise: Exercise ;\n    index: number;\n}\n\nexport function ExerciseComponent({exercise , index}: Props) {\n    const classes = useStyles();\n    const [value, setValue] = useState<string>('');\n\n    const dispatch = useDispatch();\n\n    const updateAnswer = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const re = /^[0-9\\b]+$/;\n        if (e.target.value === '' || re.test(e.target.value)) {\n            setValue(e.target.value);\n        }\n    };\n\n    const handleKeyPress = (e: React.KeyboardEvent, id: string) => {\n      if(e.key === 'Enter'){\n        submitAnswer(id);\n      }\n    }\n\n    const submitAnswer = (id: string) => {\n      dispatch({\n        type: TYPES.SUBMIT_ANSWER,\n        payload: {id: id, answer: parseInt(value)}\n      });\n    };\n\n    return (\n        <Card key={exercise.id}>\n        <CardContent\n          className={clsx(classes.cardRow, {\n            [classes.inCorrect]: exercise.wasLastSubmittedAnswerCorrect === false,\n          })}\n        >\n            <Container className={classes.exercise}>\n              <Box className={classes.calculation}>\n                <Typography variant=\"h3\">\n                  {exercise.toString()} =\n                </Typography> \n              </Box>\n              <Box className={clsx(classes.answer)}>\n                <TextField\n                  inputRef={input => input && index === 0 && input.focus()}\n                  value={value}\n                  name={exercise.id}\n                  variant=\"outlined\"\n                  onChange={updateAnswer}\n                  onKeyPress={(e) => handleKeyPress(e, exercise.id)}\n                  InputProps={{\n                    className: clsx(classes.input, {\n                      [(classes.inCorrect, classes.white)]:\n                        exercise.wasLastSubmittedAnswerCorrect === false,\n                    }),\n                    classes: {\n                      focused:\n                        exercise.wasLastSubmittedAnswerCorrect === false\n                          ? classes.yellow\n                          : classes.focused,\n                    },\n                  }}\n                />\n                <Box>\n                  <SendIcon\n                    className={classes.icon}\n                    onClick={() => submitAnswer(exercise.id)}\n                  />\n                </Box>\n              </Box>\n            </Container>\n        </CardContent>\n      </Card>\n    );\n}\n","import { useSelector } from \"react-redux\";\nimport { GameState } from \"../../redux/reducers\";\nimport \"./App.css\";\nimport { ExerciseComponent } from \"./Exercise\";\n\nexport function Catalogue() {\n  const { catalogue  } = useSelector((state: GameState) => {\n    return {\n      catalogue: state.catalogue \n    } ;\n  });\n\n  return catalogue.exerciseToBeCompleted.length> 0 ?\n      <div>\n        {catalogue.exerciseToBeCompleted.map((exercise, index) =>\n          {\n            return <ExerciseComponent\n           key={exercise.id}\n           exercise={exercise}\n          index={index}/>\n         }\n         )\n      }\n    </div> : null; \n}","import { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n    spacer: {\n        marginBottom: 15 \n    }\n  });\n\n\nconst Spacer = ({children}) => {\n    const classes = useStyles();\n    return <div className={classes.spacer}>{children}</div>;\n};\n\n\nexport default Spacer;","import \"./App.css\";\nimport { Button, Container, Grid, makeStyles, Slider, TextField } from \"@material-ui/core\";\nimport { createTheme } from \"@material-ui/core/styles\";\nimport purple from \"@material-ui/core/colors/purple\";\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { ThemeProvider } from \"@material-ui/core\";\nimport { ImageList } from \"@material-ui/core\";\nimport { ImageListItem } from \"@material-ui/core\";\nimport { Card } from \"@material-ui/core\";\nimport { CardActions } from \"@material-ui/core\";\nimport { CardContent } from \"@material-ui/core\";\nimport { GameState, initialState } from \"./redux/reducers\";\nimport TYPES from \"./redux/types\";\nimport { Catalogue } from \"./screens/Catalogue\";\nimport Spacer from \"./components/Spacer\";\nimport { SetStateAction, useState } from \"react\";\n\n\n\nconst useStyles = makeStyles({\n  slider: {\n    margin: \"10px\",\n    \n  },\n})\n\nfunction App() {\n  const { config, score, difficulty } = useSelector((state: GameState) => {\n    return {\n      config: state.config?state.config: initialState.config,\n      score: state.score,\n      difficulty: state.difficulty\n    };\n  });\n\n\n;\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const theme = createTheme({\n    palette: {\n      primary: {\n        main: purple[500],\n      },\n      secondary: {\n        main: \"#11cb5f\",\n      },\n    },\n  });\n\n  const LABELS: string[] = [\n    \"High Digit\",\n    \"Number of Digit\",\n    \"Number of Exercise\",\n    \"Target (%)\",\n  ];\n\n  interface SettingProps {\n    label: string;\n    value: number;\n  }\n\n  const settings: SettingProps[] = [\n    { label: LABELS[0], value: config.highDigit },\n    { label: LABELS[1], value: config.numberOfDigits },\n    { label: LABELS[2], value: config.numberOfExercises }\n  ];\n\n  const isEmpty = (str: string): boolean => {\n    return (!str || str.length === 0 );\n  }\n\n  const handleChange = (label: string, str: string) => {\n    if (isEmpty(str)){\n      return;\n    }\n\n    const value = parseInt(str);\n    if (label === LABELS[0]) {\n      dispatch({type: TYPES.UPDATE_CONFIG, payload: { highDigit: value }});\n    } else if (label === LABELS[1]) {\n      dispatch({type: TYPES.UPDATE_CONFIG, payload: { numberOfDigits: value }});\n    } else if (label === LABELS[2]) {\n      dispatch({type: TYPES.UPDATE_CONFIG, payload: { numberOfExercises: value }});\n    } else {\n      dispatch({type: TYPES.UPDATE_CONFIG, payload: { target: value }});\n  }\n\n  };\n\n  const getMax = (label: string) => {\n    if (label === LABELS[0]) {\n      return 100;\n    } else if (label === LABELS[1]) {\n      return 5;\n    } else {\n      return 15;\n    }\n  };\n\n  const getMin = (label: string) => {\n    if (label === LABELS[0]) {\n      return 0;\n    } else if (label === LABELS[1]) {\n      return 2;\n    } else {\n      return 1;\n    }\n  };\n\n  const marks = [\n    {\n      value: 0,\n      label: \"Lvl 0\"\n    },\n    {\n      value: 1,\n      label: \"Lvl 1\"\n    },\n    {\n      value: 2,\n      label: \"Lvl 2\"\n    },\n  ];\n\n  const [val, setVal] = useState(0);\n  const onChange = (e: any, newVal: number | number[]) => {\n\n    setVal(newVal as SetStateAction<number>);\n    if (difficulty !== newVal) {\n      dispatch({type: TYPES.UPDATE_DIFFICULTY, payload: { difficulty: newVal }});\n    }\n  };\n\n\n\n  return (\n    <>\n      <ThemeProvider theme={theme}>\n      <Grid container spacing={1}>\n        <Grid item xs={10}>\n        <Container maxWidth=\"xl\">\n            <Catalogue/>\n          </Container>\n\n          <Container\n            maxWidth=\"xl\"\n            style={{\n              paddingTop: \"10px\",\n            }}\n          >\n            <Spacer>\n              <Card>\n                <CardActions>\n                    <Slider \n                      className={classes.slider}\n                      marks={marks}\n                      step={null}\n                      defaultValue={1}\n                      value={val}\n                      min={0}\n                      max={3}\n                      onChange={(e, val) => onChange(e, val)}\n                    />\n                </CardActions>\n              </Card>\n            </Spacer>\n  \n            <Card>\n              <CardContent>\n                <ImageList cols={4} gap={30} rowHeight={\"auto\"}>\n                  {settings.map((setting) => (\n                    <ImageListItem cols={1}>\n                      <CardActions>\n                        <TextField\n                          label={setting.label}\n                          type=\"number\"\n                          InputLabelProps={{ shrink: true }}\n                          variant=\"filled\"\n                          value={setting.value}\n                          fullWidth\n                          inputProps={{\n                            step: 1,\n                            min: getMin(setting.label),\n                            max: getMax(setting.label),\n                          }}\n                          onChange={(e) =>\n                            handleChange(setting.label, e.currentTarget.value)\n                          }\n                        />\n                      </CardActions>\n                    </ImageListItem>\n                  ))}\n\n                  <ImageListItem cols={1}>\n                    <CardActions>\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => dispatch({type: TYPES.START_GAME})}\n                      >\n                        GENERATE EXERCISE\n                      </Button> \n                    </CardActions>\n                  </ImageListItem>\n                </ImageList>\n              </CardContent>\n            </Card>\n          </Container>\n        </Grid>\n        <Grid item xs={2}>\n\n          <table>\n            <thead>\n              <tr >\n                <th>Total Score:</th>\n                <th>{score}</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>Max Score:</td>\n                <td>{config.numberOfExercises}</td>\n              </tr>\n            </tbody>\n          </table>\n        </Grid>\n      </Grid>\n\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {createStore, applyMiddleware, compose} from 'redux';\nimport { createLogger } from 'redux-logger';\nimport {gameReducer, GameState} from './reducers';\nimport storage from 'redux-persist/lib/storage';\nimport { persistReducer, persistStore } from 'redux-persist';\n\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  debug: true,\n}\n\nconst persistedReducer = persistReducer<GameState>(persistConfig, gameReducer);\n\nexport const store = createStore(\n  persistedReducer, \n  undefined,\n  compose(applyMiddleware(\n    createLogger(),\n  ))\n)\n\nexport const persistor = persistStore(store, null, () => {store.getState()})\n \n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>          \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}