{"version":3,"sources":["redux/types.ts","screens/Catalogue/Exercise/index.tsx","screens/Catalogue/index.tsx","App.tsx","domain/index.ts","reportWebVitals.ts","redux/reducers.ts","index.tsx","redux/store.ts"],"names":["TYPES","useStyles","makeStyles","cardRow","border","boxShadow","textShadow","alignItems","exercise","display","flexWrap","alignContent","justifyContent","calculation","flex","textAlign","answer","marginLeft","padding","inCorrect","backgroundColor","color","input","fontSize","fontFamily","fontWeight","lineHeight","letterSpacing","focused","white","yellow","icon","margin","height","width","ExerciseComponent","index","classes","useState","value","setValue","dispatch","useDispatch","submitAnswer","id","type","SUBMIT_ANSWER","payload","parseInt","Card","CardContent","className","clsx","correct","Container","Box","Typography","variant","operators","join","TextField","inputRef","focus","name","onChange","e","target","test","onKeyPress","key","handleKeyPress","InputProps","onClick","Catalogue","catalogue","useSelector","state","exercises","filter","map","App","Category","config","score","theme","createMuiTheme","palette","primary","main","purple","secondary","LABELS","settings","label","highDigit","numberOfDigits","numberOfExercises","getMax","ThemeProvider","Grid","container","spacing","item","xs","maxWidth","style","paddingTop","GridList","cols","cellHeight","setting","GridListTile","CardActions","InputLabelProps","shrink","fullWidth","inputProps","step","min","max","str","length","isEmpty","UPDATE_CONFIG","handleChange","currentTarget","Button","START_GAME","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","assignmentGenerator","initialState","running","gameReducer","action","generateExercises","Object","assign","correctAnswer","currentScore","it","Array","_","i","uuidv4","next","category","WALK","evaluate","allSumsPositive","slice","number","upTill","Math","floor","random","toString","charAt","ReactDOM","render","StrictMode","store","createStore","composeWithDevTools","applyMiddleware","logger","document","getElementById"],"mappings":"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","file":"static/js/main.5d31842b.chunk.js","sourcesContent":["enum TYPES {\n    START_GAME = 'START_GAME',\n    UPDATE_CONFIG = 'UPDATE_CONFIG',\n    GENERATE_EXERICES = 'GENERATE_EXERICES',\n    SUBMIT_ANSWER = 'SUBMIT_ANSWER',\n    INCREASE_SCORE = 'INCREASE_SCORE'\n}\n\nexport default TYPES;","import { Box } from \"@material-ui/core\";\nimport {\n  Card,\n  CardContent,\n  Container,\n  TextField,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport clsx from \"clsx\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport TYPES from \"../../../redux/types\";\n\nconst useStyles = makeStyles({\n    cardRow: {\n      border: \"0 solid transparent\",\n      boxShadow: \"0 0.1875rem 0 #ec131e\",\n      textShadow: \"0 0.0625rem 0 rgb(0 0 0 / 15%)\",\n      alignItems: \"center\",\n    },\n    exercise: {\n      display: \"flex\",\n      flexWrap: \"nowrap\",\n      alignContent: \"flex-start\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n    },\n    calculation: {\n      flex: 0.5,\n      textAlign: \"end\",\n    },\n    answer: {\n      flex: 0.5,\n      display: \"flex\",\n      alignItems: \"center\",\n      marginLeft: \"10px\",\n      padding: \"10px\",\n    },\n    inCorrect: {\n      backgroundColor: \"#ef5350\", // red\n      color: \"#fff\",\n      textShadow: \"0 0.0625rem 0 rgb(0 0 0 / 15%)\",\n    },\n    input: {\n      border: \"10 solid green\",\n      fontSize: \"3rem\",\n      fontFamily: \"Roboto, Helvetica, Arial, sans-serif\",\n      fontWeight: 400,\n      lineHeight: \"1.167\",\n      letterSpacing: \"0em\",\n      color: \"#929797\", // grey\n    },\n    focused: {\n      color: \"#25ad62\", // green\n    },\n    white: {\n      color: \"white\",\n      textShadow: \"0 0.0625rem 0 rgb(0 0 0 / 15%)\",\n    },\n    yellow: {\n      color: \"#ffee58\",\n      textShadow: \"0 0.0625rem 0 rgb(0 0 0 / 15%)\",\n    },\n    icon: {\n      margin: \"10px\",\n      display: \"flex\",\n      height: \"50%\",\n      width: \"50%\",\n    },\n  });\n\nexport interface Exercise {\n    id: string;\n    correct?: boolean;\n    operators: Array<string>;\n}\n\nexport interface Props {\n    exercise: Exercise;\n    index: number;\n}\n\nexport function ExerciseComponent({exercise, index}: Props) {\n\n    const classes = useStyles();\n    const [value, setValue] = useState<string>('');\n\n    const dispatch = useDispatch();\n\n    const updateAnswer = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const re = /^[0-9\\b]+$/;\n        if (e.target.value === '' || re.test(e.target.value)) {\n            setValue(e.target.value);\n        }\n    };\n\n    const handleKeyPress = (e: React.KeyboardEvent, id: string) => {\n      if(e.key === 'Enter'){\n        submitAnswer(id);\n      }\n    }\n\n    const submitAnswer = (id: string) => {\n      dispatch({\n        type: TYPES.SUBMIT_ANSWER,\n        payload: {id: id, answer: parseInt(value)}\n      });\n    };\n\n\n    return (\n        <Card key={exercise.id}>\n        <CardContent\n          className={clsx(classes.cardRow, {\n            [classes.inCorrect]: exercise.correct === false,\n          })}\n        >\n            <Container className={classes.exercise}>\n              <Box className={classes.calculation}>\n                <Typography variant=\"h3\">\n                  {exercise.operators.join(\" \")} =\n                </Typography>\n              </Box>\n              <Box className={clsx(classes.answer)}>\n                <TextField\n                  inputRef={input => input && index === 0 && input.focus()}\n                  value={value}\n                  name={exercise.id}\n                  variant=\"outlined\"\n                  onChange={updateAnswer}\n                  onKeyPress={e => handleKeyPress(e, exercise.id)}\n                  InputProps={{\n                    className: clsx(classes.input, {\n                      [(classes.inCorrect, classes.white)]:\n                        exercise.correct === false,\n                    }),\n                    classes: {\n                      focused:\n                        exercise.correct === false\n                          ? classes.yellow\n                          : classes.focused,\n                    },\n                  }}\n                />\n                <Box>\n                  <SendIcon\n                    className={classes.icon}\n                    onClick={() => submitAnswer(exercise.id)}\n                  />\n                </Box>\n              </Box>\n            </Container>\n        </CardContent>\n      </Card>\n    );\n}\n\n","\nimport { useSelector } from \"react-redux\";\nimport { GameState } from \"../../redux/reducers\";\nimport { ExerciseComponent } from \"./Exercise\";\nimport \"./App.css\";\n\nexport function Catalogue() {\n\n  const { catalogue } = useSelector((state: GameState) => {\n    return {\n      catalogue: state.catalogue\n    };\n  });\n\n  return <div>\n    {catalogue.exercises\n      .filter((e) => e.correct !== true)\n      .map((exercise, index) =>\n        <ExerciseComponent key={exercise.id} exercise={exercise} index={index}/>\n      )\n    }\n    </div>;\n}\n","import \"./App.css\";\nimport { Button, Container, Grid, TextField } from \"@material-ui/core\";\nimport { createMuiTheme } from \"@material-ui/core\";\nimport purple from \"@material-ui/core/colors/purple\";\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { ThemeProvider } from \"@material-ui/core\";\n\nimport { GridList } from \"@material-ui/core\";\nimport { GridListTile } from \"@material-ui/core\";\nimport { Card } from \"@material-ui/core\";\nimport { CardActions } from \"@material-ui/core\";\nimport { CardContent } from \"@material-ui/core\";\nimport { GameState } from \"./redux/reducers\";\nimport TYPES from \"./redux/types\";\nimport { Catalogue } from \"./screens/Catalogue\";\n\nfunction App() {\n\n  const { config, score } = useSelector((state: GameState) => {\n    return {\n      config: state.config,\n      score: state.score\n    };\n  });\n\n  const dispatch = useDispatch();\n\n  const theme = createMuiTheme({\n    palette: {\n      primary: {\n        main: purple[500],\n      },\n      secondary: {\n        main: \"#11cb5f\",\n      },\n    },\n  });\n\n  const LABELS: string[] = [\n    \"High Digit\",\n    \"Number of Digit\",\n    \"Number of Exercise\",\n  ];\n\n  interface SettingProps {\n    label: string;\n    value: number;\n  }\n\n  const settings: SettingProps[] = [\n    { label: LABELS[0], value: config.highDigit },\n    { label: LABELS[1], value: config.numberOfDigits },\n    { label: LABELS[2], value: config.numberOfExercises },\n  ];\n\n  const isEmpty = (str: string): boolean => {\n    return (!str || str.length === 0 );\n  }\n\n  const handleChange = (label: string, str: string) => {\n    if (isEmpty(str)){\n      return;\n    }\n\n    const value = parseInt(str);\n    if (label === LABELS[0]) {\n      dispatch({type: TYPES.UPDATE_CONFIG, payload: { highDigit: value }});\n    } else if (label === LABELS[1]) {\n      dispatch({type: TYPES.UPDATE_CONFIG, payload: { numberOfDigits: value }});\n    } else {\n      dispatch({type: TYPES.UPDATE_CONFIG, payload: { numberOfExercises: value }});\n    }\n  };\n\n  const getMax = (label: string) => {\n    if (label === LABELS[0]) {\n      return 100;\n    } else if (label === LABELS[1]) {\n      return 5;\n    } else {\n      return 15;\n    }\n  };\n\n  const getMin = (label: string) => {\n    if (label === LABELS[0]) {\n      return 0;\n    } else if (label === LABELS[1]) {\n      return 2;\n    } else {\n      return 1;\n    }\n  };\n\n  return (\n    <>\n      <ThemeProvider theme={theme}>\n      <Grid container spacing={1}>\n        <Grid item xs={2}>\n          <table>\n            <tr>\n              <td>Total Score:</td><td>{score}</td>\n            </tr>\n            <tr>\n              <td>Max Score:</td><td>{config.numberOfExercises}</td>\n            </tr>\n          </table>\n        </Grid>\n        <Grid item xs={10}>\n        <Container maxWidth=\"xl\">\n            <Catalogue/>\n          </Container>\n\n          <Container\n            maxWidth=\"xl\"\n            style={{\n              paddingTop: \"10px\",\n            }}\n          >\n              <Card>\n              <CardContent>\n                <GridList cols={4} spacing={30} cellHeight={\"auto\"}>\n                  {settings.map((setting) => (\n                    <GridListTile cols={1}>\n                      <CardActions>\n                        <TextField\n                          label={setting.label}\n                          type=\"number\"\n                          InputLabelProps={{ shrink: true }}\n                          variant=\"filled\"\n                          value={setting.value}\n                          fullWidth\n                          inputProps={{\n                            step: 1,\n                            min: getMin(setting.label),\n                            max: getMax(setting.label),\n                          }}\n                          onChange={(e) =>\n                            handleChange(setting.label, e.currentTarget.value)\n                          }\n                        />\n                      </CardActions>\n                    </GridListTile>\n                  ))}\n                  <GridListTile cols={1}>\n                    <CardActions>\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => dispatch({type: TYPES.START_GAME})}\n                      >\n                        GENERATE EXERCISE\n                      </Button>\n                    </CardActions>\n                  </GridListTile>\n                </GridList>\n              </CardContent>\n            </Card>\n          </Container>\n        </Grid>\n      </Grid>\n\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n","export interface Catalogue {\n    exercises: Exercise[]\n}\n\nexport interface Exercise {\n    id: string;\n    correct?: boolean; //undefined == not solved\n    operators: Array<string>;\n    category: Category;\n}\n\nexport interface Config {\n    numberOfExercises: number;\n    numberOfDigits: number;\n    highDigit: number;\n}\n\nexport enum Category {\n    WALK = 'WALK',\n    FIGHT = 'FIGHT',\n    OPEN = 'OPEN',\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { evaluate } from 'mathjs';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Catalogue, Config, Category, Exercise } from '../domain';\nimport {Actions} from './actions';\nimport TYPES from './types';\n\nexport const initialState: GameState = {\n    score: 0,\n    running: false,\n    config: {\n        numberOfExercises: 10,\n        numberOfDigits: 3,\n        highDigit: 10\n    },\n    catalogue: {exercises: []},\n};\n\nexport interface GameState {\n    score: number;\n    running: boolean;\n    config: Config;\n    catalogue: Catalogue;\n}\n\nexport const gameReducer = (\n    state: GameState = initialState,\n    action: Actions,\n  ): GameState => {\n\n    switch (action.type) {\n        case TYPES.START_GAME:\n            return {\n                ...state,\n                score: 0,\n                running: true,\n                catalogue: generateExercises(state.config)\n            }\n        case TYPES.UPDATE_CONFIG:\n            return {\n                ...state,\n                config: {\n                    ...state.config,\n                    ...action.payload\n                }\n            }\n        case TYPES.SUBMIT_ANSWER:\n            const {id, answer} = action.payload\n            const exercise = state.catalogue.exercises\n                .filter(e => e.id === id)\n                .map(e => Object.assign({}, e, { correct: correctAnswer(e, answer) }))[0];\n\n            if (exercise){\n\n                const catalogue = {\n                    exercises: state.catalogue.exercises.map(e => exercise.id === e.id ? exercise : e)\n                }\n                const currentScore = exercise.correct ? state.score + 1 : state.score - 1\n\n                return {\n                    ...state,\n                    score: currentScore,\n                    running: true,\n                    catalogue: catalogue\n                }\n            } else {\n                return state;\n            }\n\n        default:\n            return state;\n    }\n}\n\nconst generateExercises = (config: Config): Catalogue => {\n    const it = assignmentGenerator(config);\n\n    return {\n        exercises: [...Array(config.numberOfExercises)].map((_, i) => {\n            return {\n                id: uuidv4(),\n                operators: it.next().value,\n                category: Category.WALK\n            };\n        })\n    };\n};\n\nconst evaluateSolution = (catalogue: Catalogue, id: string, answer: number): Catalogue => {\n    return {\n        exercises: catalogue.exercises.map((e) =>\n            e.id === id\n                ? Object.assign({}, e, { correct: correctAnswer(e, answer) })\n                : e\n            )\n    }\n  };\n\nconst correctAnswer = (exercise: Exercise, answer: number) => {\n    const correctAnswer = evaluate(exercise.operators.join(\"\"));\n    return correctAnswer == answer;\n};\n\nconst randomOperator = (index: number, upTill: number): string =>\n    index % 2 === 0\n    ? Math.floor(Math.random() * upTill).toString()\n    : \"+-*:\".charAt(Math.floor(Math.random() * 2));\n\nconst allSumsPositive = (operators: string[]): boolean => {\n    if (operators.length < 3) {\n        return true;\n    }\n\n    if (evaluate(operators.join(\"\")) <= 0){\n        return false;\n    }\n\n    return evaluate(operators.slice(0, 3).join(\"\")) >= 0 && allSumsPositive(operators.slice(2));\n};\n\nfunction* assignmentGenerator(config: Config): Generator<string[], any, number> {\n    const number = config.numberOfDigits + (config.numberOfDigits - 1);\n    while (true) {\n        const operators = [...Array(number)].map((_, i) =>\n            randomOperator(i, config.highDigit)\n        );\n\n        if (allSumsPositive(operators)) {\n            yield operators;\n        }\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { configureStore } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n     <Provider store={configureStore()}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import {createStore, applyMiddleware} from 'redux';\nimport logger from 'redux-logger';\nimport {gameReducer} from './reducers';\nimport {composeWithDevTools} from 'redux-devtools-extension';\n\n\nexport const configureStore = () =>\n  createStore(\n    gameReducer,\n    composeWithDevTools(applyMiddleware(logger)),\n  );"],"sourceRoot":""}